package com.dvlcube.cuber.factory;

/**
 * Creates random names.
 * 
 * @author wonka
 */
public class NameFactory {

	/**
	 * Creates a random name.
	 */
	public NameFactory() {
		setNameLength();
		setRandomName();
	}

	/**
	 * Creates the specified number of random names.
	 * 
	 * @param names
	 *            The desired number of random names.
	 */
	public NameFactory(int names) {
		for (int i = 0; i < names; i++) {
			setNameLength();
			setRandomName();
		}
	}

	public static final int CONSONANTS = 0;
	public static final int VOWELS = 1;
	private String name;
	private int nameLength;
	private final String[] letters = { "bcdfghjklmnprstvwyz", "aeiou" };
	private final String[] consonantBridges = { "bl;br", "cc;ck;ch;cl;cr", "dl;dh;dr;dw", "fl;fr", "gh;gl;gr", "hl;hr",
			"kl;kr;kn;ks;ky", "ll;lh;lly", "pl;pr;ph", "qu", "rr;rh", "sl;sp;ss;sw;st;sy", "tl;tr;ts;th;tw", "ul",
			"vl", "wr;wh" };
	// private final String[] initialBridges = {"bj", "mc"};
	// private final String[] neverInitials = {"tt", "rr"};
	private final StringBuilder names = new StringBuilder();

	/**
	 * Gets the last created name.
	 * 
	 * @return The last name generated by this instance.
	 */
	public String getName() {
		return name;
	}

	public String getCompleteName() {
		return names.toString().replaceFirst(" ", "");
	}

	public int getNameLength() {
		return nameLength;
	}

	public String[] getLetters() {
		return letters;
	}

	public String[] getConsonantBridges() {
		return consonantBridges;
	}

	public String getConsonants() {
		return letters[0];
	}

	public int getConsonantsLength() {
		return letters[0].length();
	}

	public String getVowels() {
		return letters[1];
	}

	public int getVowelsLength() {
		return letters[1].length();
	}

	public int getLength(int kind) {
		return letters[kind].length();
	}

	public final void setNameLength() {
		this.nameLength = (int) (Math.random() * 4) + 3;
		if (nameLength % 2 == 1) {
			nameLength++;
		}
	}

	/**
	 * Builds a random name with an initial upper case letter.
	 */
	public final void setRandomName() {
		StringBuilder nameBuilder = new StringBuilder();
		for (int i = getRandomNumbers(2); i < getNameLength(); i++) {
			if (i % 2 == 0) {
				if (getRandomNumbers(10) < 4) {
					nameBuilder.append(getBridge());
				} else {
					nameBuilder.append(newConsonant());
				}
			} else {
				nameBuilder.append(newVowel());
			}
		}
		this.name = initCap(nameBuilder.toString());
		names.append(" ").append(name);
	}

	/**
	 * Builds a random name with an initial upper case letter.
	 * 
	 * @return
	 */
	public void setRandomName2() {
		StringBuilder nameBuilder = new StringBuilder();

		for (int i = 0; i < getNameLength(); i++) {
			nameBuilder.append(letters[i % 2].charAt((int) (Math.random() * getLength(i % 2))));
		}
		this.name = initCap(nameBuilder.toString());
	}

	/* Helpers */
	public String getBridge() {
		String randomBridge = consonantBridges[(int) (Math.random() * consonantBridges.length)];
		String[] bridgeItems = randomBridge.split(";");
		int randomItem = (int) (Math.random() * bridgeItems.length);
		String bridge = bridgeItems[randomItem];
		return bridge;
	}

	public String initCap(String string) {
		String initialLetter = string.substring(0, 1);
		String newString = initialLetter.toUpperCase() + string.substring(1);
		return newString;
	}

	public char newConsonant() {
		return getConsonants().charAt((int) (Math.random() * getConsonantsLength()));
	}

	public char newVowel() {
		return getVowels().charAt((int) (Math.random() * getVowelsLength()));
	}

	public static int getRandomNumbers(int amount) {
		return (int) (Math.random() * amount);
	}
}
